---
- name: EC2 | debug show spec
  debug:
    var: machine

- name: EC2 | Ensuring IAM role exists
  iam_role:
    name: "{{ machine.instance_role }}"
    state: present
    description: "Instance Profile for {{ machine.instance_role }}"
    assume_role_policy_document: "{{ machine.instance_role_spec.assume_role_policy_document |d(lookup('file','iam-role-policy-ec2.json')) }}"
    managed_policies: "{{ machine.instance_role_spec.managed_policies |d(omit) }}"
    policy_document: "{{ machine.instance_role_spec.policy_document |d(omit) }}"
    tags: "{{ machine.instance_role_spec.tags |d(omit) }}"
  register: iam_create

- name: EC2 | Ensuring IAM policy exists
  iam_policy:
    iam_type: role
    iam_name: "{{ machine.instance_role }}"
    policy_name: "{{ machine.iam_policy_name }}"
    state: present
    policy_json: "{{ machine.instance_policy_spec.policy_json }}"
  when: machine.iam_policy_name is defined


#- name: Discovery subnet ID from name
#  block:
- name: Get facts for subnet
  ec2_vpc_subnet_facts:
    filters:
      "tag:Name": "{{ machine.vpc_subnet_name }}"
  register: sb_out
  when:  machine.vpc_subnet_name is defined

- name: Set subnet ID from name
  set_fact:
    subnet_id: "{{ sb_out.subnets[0].subnet_id }}"
  when: machine.vpc_subnet_name is defined

- name: Discovery subnet ID from name
  set_fact:
    subnet_id: "{{ machine.vpc_subnet_id }}"
  when: machine.vpc_subnet_id is defined

- name: EC2 | Creating instance(s)
  ec2_instance:
    availability_zone: "{{ machine.availability_zone |d(omit) }}"
    cpu_credit_specification: "{{ machine.cpu_credit_specification |d(omit) }}"
    cpu_options: "{{ machine.cpu_options |d(omit) }}"
    detailed_monitoring: "{{ machine.detailed_monitoring |d(omit) }}"
    ebs_optimized: "{{ machine.ebs_optimized |d(omit) }}"
    ec2_url: "{{ machine.ec2_url |d(omit) }}"
    filters: "{{ machine.filters |d(omit) }}"
    image_id: "{{ machine.image_id |d(omit) }}"
    instance_role: "{{ machine.instance_role |d(omit) }}"
    instance_type: "{{ machine.instance_type |d(omit) }}"
    key_name: "{{ machine.key_name |d(omit) }}"
    launch_template: "{{ machine.launch_template |d(omit) }}"
    metadata_options: "{{ machine.metadata_options |d(omit) }}"
    network: "{{ machine.network |d(omit) }}"
    placement_group: "{{ machine.placement_group |d(omit) }}"
    purge_tags: "{{ machine.purge_tags |d(omit) }}"
    region: "{{ machine.region |d(omit) }}"
    security_group: "{{ machine.security_group |d(omit) }}"
    security_groups: "{{ machine.security_groups |d(omit) }}"
    state: "{{ machine.state | d(omit) }}"
    tags: "{{ machine.tags | d(omit) }}"
    tenancy: "{{ machine.tenancy | d(omit) }}"
    termination_protection: "{{ machine.termination_protection | d(omit) }}"
    tower_callback: "{{ machine.tower_callback | d(omit) }}"
    # There's a bug on the default var '(omit)' when using ign (json),
    # the module is not property formating the user_data from vars,
    # then the node will not run correctly on the boot.
    user_data: "{{ machine.user_data | string }}"
    volumes: "{{ machine.volumes | d(omit) }}"
    vpc_subnet_id: "{{ subnet_id | d(omit) }}"
    wait: "{{ machine.wait | d(omit) }}"
    wait_timeout: "{{ machine.wait_timeout |d(omit) }}"
  register: machine_out
  #with_items: "{{ machine.instances_by_zone }}"

- name: EC2 | debug Machine created
  debug:
    var: machine_out

- name: Register EC2 to resources
  include: "aws-register-{{ reg.service }}.yml"
  with_items: "{{ machine.register_resources }}"
  loop_control:
    loop_var: reg
